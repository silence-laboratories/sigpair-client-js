import * as ed from "@noble/ed25519";
import { SigpairAdmin } from "sigpair-admin";
import {
  P1Keygen,
  P1Keyshare,
  P1KeyshareV2,
  P1Signer,
  PartyKeys,
  SignWithRecId,
  generatePartyKeys,
} from "@silencelaboratories/two-party-ecdsa-js";

/**
 * Sigpair client to generate and refresh keyshares, and sign messages by communicating with the Sigpair server.
 */
export class SigpairClient {
  userToken: string;
  signingKey: Uint8Array;
  baseUrl: URL;
  /**
   * Create a new Sigpair client
   * @param userToken User token generated by the Sigpair admin
   * @param signingKey ed25519 signing keys to sign messages. Must have the same public key as in the generated user token.
   * @param baseUrl Base URL of the Sigpair server
   */
  constructor(userToken: string, signingKey: string, baseUrl: string) {
    this.userToken = userToken;
    this.signingKey = ed.etc.hexToBytes(signingKey);
    this.baseUrl = new URL(baseUrl);
  }

  /**
   * Update the user token used for future requests
   * @param token New user token to use for future requests
   */
  setNewToken(token: string) {
    this.userToken = token;
  }

  /**
   * Generate an ECDSA keyshare
   * @param partyKeys Keys required for MPC keygen, generated with `generatePartyKeys()`.
   * Can be reused for multiple keygen and refresh protocols.
   * @returns
   */
  async genECDSAKey(partyKeys: PartyKeys): Promise<P1KeyshareV2> {
    const socket = await this.connectSocket("/v2/ecdsa/keygen");
    socket.onclose = (event) => {};

    socket.onerror = (event) => {
      throw new Error("WebSocket error: " + event);
    };

    const keys = await generatePartyKeys();
    const p1 = await P1Keygen.init(keys);
    const msg1 = await p1.genMsg1();
    await sendMessage(msg1.msg_data, this.signingKey, socket);
    const message = await receiveMessage(socket, 10000);

    const [keyshare, msg3] = await p1.processMsg2({
      msg_data: message,
      msg_type: "KeyMsg2",
      instance_id: msg1.instance_id,
    });

    await sendMessage(msg3.msg_data, this.signingKey, socket);
    socket.close();
    return keyshare;
  }
  /**
   * Refresh an ECDSA keyshare
   * @param currKeyshare current keyshare to refresh
   * @param keys Party keys (keys used in keygen can be reused, or new keys can be generated with `generatePartyKeys()`
   * @returns Refreshed keyshare with the same public key.
   */
  async refreshECDSAKey(
    currKeyshare: P1KeyshareV2 | P1Keyshare,
    keys: PartyKeys
  ): Promise<P1KeyshareV2> {
    const socket = await this.connectSocket(
      `/v2/ecdsa/refresh?key_id=${currKeyshare.data.key_id}`
    );
    socket.onclose = (event) => {};

    socket.onerror = (event) => {
      throw new Error("WebSocket error: " + event);
    };

    const p1 = await currKeyshare.getRefreshInstance(keys);
    const msg1 = await p1.genMsg1();
    await sendMessage(msg1.msg_data, this.signingKey, socket);
    const message = await receiveMessage(socket, 10000);

    const [keyshare, msg3] = await p1.processMsg2({
      msg_data: message,
      msg_type: "KeyMsg2",
      instance_id: msg1.instance_id,
    });

    await sendMessage(msg3.msg_data, this.signingKey, socket);
    socket.close();
    return keyshare;
  }
  /**
   *
   * Generate an ECDSA signature
   * @param keyshare Keyshare to sign with
   * @param messageHash Hash of the message to sign as a hex string. Must be 32 bytes. Can be prefixed with 0x or not.
   * @param chainPath BIP32 chain path to derive child key to sign. If not specified, defaults to "m". If you're not sure what this is, leave it as "m".
   * @returns
   */
  async genECDSASign(
    keyshare: P1KeyshareV2,
    messageHash: string,
    chainPath: string = "m"
  ): Promise<SignWithRecId> {
    if (messageHash.startsWith("0x")) {
      messageHash = messageHash.slice(2);
    }
    const msgHashBytes = ed.etc.hexToBytes(messageHash);
    if (msgHashBytes.length != 32) {
      throw new Error("Message hash must be 32 bytes");
    }

    const socket = await this.connectSocket("/v2/ecdsa/sign");

    socket.onclose = async (event) => {};

    socket.onerror = (event) => {
      throw new Error("WebSocket error: " + event);
    };

    const p1 = await P1Signer.init(keyshare, msgHashBytes, chainPath);
    const msg1 = await p1.genMsg1();
    const msgReq: SignMessageRequest = {
      key_id: keyshare.data.key_id,
      chain_path: chainPath,
      message_hash: messageHash,
      sign_msg1: Buffer.from(msg1.msg_data).toString("base64"),
    };

    const msgReq2 = Buffer.from(JSON.stringify(msgReq));

    await waitForSocketOpen(socket);
    await sendMessage(msgReq2, this.signingKey, socket);

    const message = await receiveMessage(socket, 10000);

    const [signature, msg3] = await p1.processMsg2({
      msg_data: message,
      msg_type: "SignMsg2",
      instance_id: msg1.instance_id,
    });

    await sendMessage(msg3.msg_data, this.signingKey, socket);

    socket.close();
    return signature;
  }

  private async connectSocket(route: string): Promise<WebSocket> {
    const socket = new WebSocket(
      `ws://${this.baseUrl.hostname}:${this.baseUrl.port}${route}`,
      {
        headers: {
          Authorization: `Bearer ${this.userToken}`,
        },
      }
    );

    await waitForSocketOpen(socket);
    return socket;
  }
}

export class TimeoutError extends Error {
  constructor() {
    super("Timed out waiting for message");
    this.name = "TimeoutError";
  }
}

async function sendMessage(
  message: number[] | Uint8Array | Buffer,
  signingKey: Uint8Array,
  socket: WebSocket
) {
  const signature = await ed.signAsync(Uint8Array.from(message), signingKey);
  const msg: Message = {
    signature: Buffer.from(signature).toString("base64"),
    content: Buffer.from(message).toString("base64"),
  };
  socket.send(Buffer.from(JSON.stringify(msg)));
}

async function receiveMessage(
  socket: WebSocket,
  timeoutMs: number
): Promise<number[]> {
  let timeoutId: NodeJS.Timeout;
  return new Promise((resolve, reject) => {
    // Set up a timeout promise that resolves after the specified timeout
    const timeoutPromise = new Promise<number[]>((_, reject) => {
      timeoutId = setTimeout(() => {
        reject(new TimeoutError());
      }, timeoutMs);
    });

    // Race the actual message promise against the timeout promise
    Promise.race([
      timeoutPromise,
      new Promise((resolve) => {
        clearTimeout(timeoutId);
        socket.onmessage = (message) => {
          const msg: Message = JSON.parse(message.data.toString());
          resolve(Array.from(Buffer.from(msg.content, "base64")));
        };
      }),
    ])
      .then(resolve as (value: unknown) => void)
      .catch(reject);
  });
}

/**
 * Message type used for communication between the client and server
 */
export type Message = {
  signature: string;
  content: string;
};

/**
 * A signing request
 */
export type SignMessageRequest = {
  key_id: string;
  chain_path: string;
  message_hash: string;
  sign_msg1: string;
};

function waitForSocketOpen(socket: WebSocket): Promise<void> {
  return new Promise((resolve, reject) => {
    if (socket.readyState === WebSocket.OPEN) {
      resolve();
    } else {
      socket.onopen = () => resolve();
      socket.onerror = (event) => reject(event);
    }
  });
}

async function main() {
  const keys = ed.utils.randomPrivateKey();
  const admin = new SigpairAdmin(
    "1ec3804afc23258f767b9d38825dc7ab0a2ea44ef4adf3254e4d7c6059c3b55a",
    "http://localhost:8080"
  );
  const userId = await admin.createUser("test");
  const userToken = admin.genUserToken(
    userId,
    ed.etc.bytesToHex(await ed.getPublicKeyAsync(keys))
  );

  const client = new SigpairClient(
    userToken,
    ed.etc.bytesToHex(keys),
    "http://localhost:8080"
  );

  const partyKeys = await generatePartyKeys();
  const keyshare = await client.genECDSAKey(partyKeys);
  console.log("Created keyshare: ", keyshare.data.key_id);

  const msgHash = ed.etc.bytesToHex(crypto.getRandomValues(new Uint8Array(32)));
  const sign = await client.genECDSASign(keyshare, msgHash);
  const key2 = await client.refreshECDSAKey(keyshare, partyKeys);
  console.log(keyshare.data.root_public_key);
  console.log(key2.data.root_public_key);
  console.log("Signature: ", sign.sign);
}

main();
